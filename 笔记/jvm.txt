jvm 虚拟机内存
1.程序计数器:
可看做当前线程所执行的字节码的行号指示器.
字节码解释器在工作是就是通过改变这个计数器的值来选去下一条需要执行的字节码命令
虚拟机多线程是通过线程轮流切换并分配CPU执行时间的方式实现的,为了线程切换后能恢复到正确的执行位置每个 线程都有一个独立的线程计数器(线程私有)
如果线程执行java代码则记录正确执行的虚拟机字节码指令的地址,如果是natvie方法则计数器为空

2.虚拟机栈
是线程私有的生命周期与线程相同.虚拟机栈描述的是java方法执行的内存模型,用于存储变量表,操作栈,动态链接,方法出口等信息(每个方法被执行时都会创建一个栈帧)
我们说的虚拟机栈,也可以说是局部变量表一部分,局部变量表存放基本类型,对象引用和returnAddress类型(返回当前调用函数返回的地址，即函数吓一跳指令地址)
内存所需空间在编译期间完成分配
如果线程请求栈深度大圩虚拟机允许深度 抛出StackOverflowError异常,如果虚拟机展可扩展当扩展无法申请到足够空间则抛出OutOfMemoryError异常

3.本地方法栈
虚拟机栈是执行java方法的服务,而本地方法栈则是为虚拟机使用的native方法服务

4 java堆
所有线程共享,虚拟机启动时市创建,存放实例对象
Java堆可以处于物理内存上不连续的内存空间

5 方法区
各线程共享区域存储已被虚拟机加载的类信息,常量静态变量,即时编译器编译后的代码数据
在jdk1.8中，永久代已经不存在，存储的类信息、编译后的代码数据等已经移动到了元空间（MetaSpace）中，
元空间并没有处于堆内存上，而是直接占用的本地内存（NativeMemory）

6.运行时常量池
用于存放编译器生成的各种自变量和符号引用在类加载后存放到运行时常量池
在JDK1.8 hotspot移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区,
只不过方法区的实现从永久代变成了元空间(Metaspace) 
======================================================================================
java垃圾回收算法
1.引用计数算法
给对象添加一个计数器每当有一个方法引用该对象就会加1,当引用失效时就会减一,任何时刻计数器为0的对象就是不在被使用l,垃圾收集器就会将其回收
引用计数法实现简单高效,但是无法解决相互引用问题

2.根搜索算法
通过一系列的名为“GC Root”的对象作为起点,向下搜索,搜索路径为引用链,当一个对象到GV root没有任何引用相连时,表示对象不可达,该对象是不可使用的，垃圾收集器将回收其所占的内存。
在java语言中，可作为GC Root的对象包括以下几种对象：
a.java虚拟机栈中引用的对象
b.方法区中的静态属性引用的对象
c.方法区常量引用对象
d.本地方法栈中JNI本地方法的引用对象。
判断废弃常量的方法：如果常量池中的某个常量没有被任何引用所引用，则该常量是废弃常量。
判断无用的类：
(1).该类的所有实例都已经被回收，即java堆中不存在该类的实例对象。
(2).加载该类的类加载器已经被回收。
(3).该类所对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射机制访问该类的方法。

Java中常用的垃圾收集算法：
标记-清除算法:
最基础的垃圾收集算法，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成之后统一回收掉所有被标记的对象。
标记-清除算法的缺点有两个：首先，效率问题，标记和清除效率都不高。其次，标记清除之后会产生大量的不连续的内存碎片，
空间碎片太多会导致当程序需要为较大对象分配内存时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作
复制算法：
是将内存平均分为两块,当其中一块使用完了时候就将内存中存活的对象复制到另一块然后把使用过的内存空间一次清理掉,
这样每次都是对一整块内存的回收
标记-整理算法：
标记-整理算法在标记-清除算法基础上做了改进，标记阶段是相同的标记出所有需要回收的对象，在标记完成之后不是直接对可回收对象进行
清理，而是让所有存活的对象都向一端移动，在移动过程中清理掉可回收的对象，这个过程叫做整理。
标记-整理算法相比标记-清除算法的优点是内存被整理以后不会产生大量不连续内存碎片问题。
复制算法在对象存活率高的情况下就要执行较多的复制操作，效率将会变低，而在对象存活率高的情况下使用标记-整理算法效率会大大提高。
分代收集算法：
根据内存中对象的存活周期不同，将内存划分为几块，java的虚拟机中一般把内存划分为新生代和年老代，当新创建对象时一般在新生代中
分配内存空间，当新生代垃圾收集器回收几次之后仍然存活的对象会被移动到年老代内存中，当大对象在新生代中无法找到足够的连续内存时
也直接在年老代中创建。

Java 垃圾收集器
Stop TheWorld 说明：
      GC在后台自动发起和自动完成的，在用户不可见的情况下，把用户正常的工作线程全部停掉，即GC停顿，会带给用户不良的体验；
      从JDK1.3到现在，从Serial收集器-》Parallel收集器-》CMS-》G1，用户线程停顿时间不断缩短，但仍然无法完全消除；
=======
Serial收集器:
       特性:
采用<<复制算法的单线程收集器>>，单线程一方面意味着它只会使用一个CPU或一条线程去完成垃圾收集工作，
另一方面也意味着在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束为止，这个过程也称为 Stop The world
      应用场景：
Serial收集器依然是虚拟机运行在Client模式下的默认新生代收集器。 在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），
可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的
=======
Serial Old收集器
特性
Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，<<使用标记-整理算法。>>
应用场景
Client模式
Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。
Server模式
如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用；
另一种用途就是作为CMS收集器的后备预案，在并发收集发生"Concurrent Mode Failure"时使用。
======
ParNew收集器:
     特性:
ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集外，其余行为和Serial收集器完全一样，
     应用场景：
ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。很重要的原因是：除了Serial收集器之外，
目前只有它能与CMS收集器配合工作（看图）。在JDK1.5时期，HotSpot推出了一款几乎可以认为具有划时代意义的垃圾收集器-----
CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。
包括Serial收集器可用的所有控制参数、收集算法、Stop The world、对象分配规则、回收策略等都一样。在实现上也共用了相当多的代码。
      优势：
在单CPU中的环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销，甚至由于线程交互的开销，
该收集器在两个CPU的环境中都不能百分百保证可以超越Serial收集器。当然，随着可用CPU数量的增加，
它对于GC时系统资源的有效利用还是很有好处的，它默认开启的收集线程数与CPU数量相同。
===========
Parallel Scavenge 收集器:
     特性:
Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，也是并行的多线程收集器
     对比分析：
Parallel Scavenge收集器 VS CMS等收集器：
Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，
而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。
由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。
Parallel Scavenge收集器 VS ParNew收集器：
Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。
      应用场景：
Parallel Scavenge收集器是虚拟机运行在Server模式下的默认垃圾收集器。
停顿时间短适合需要与用户交互的程序，良好的响应速度能提升用户体验；高吞吐量则可以高效率利用CPU时间，
尽快完成运算任务，主要适合在后台运算而不需要太多交互的任务。
该收集器以高吞吐量为目标，就是减少垃圾收集时间，从而让用户代码获得更长的运行时间。
所以适合那些运行在多个CPU上，并且专注于后台计算的应用程序，例如：执行批量处理任务、订单处理，工资支付，科学计算等。
      GC自适应的调节策略：
Parallel Scavenge收集器有一个参数-XX:+UseAdaptiveSizePolicy。
当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，
虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，
这种调节方式称为GC自适应的调节策略（GC Ergonomics）。
如果对于垃圾收集器运作原理不太了解，以至于在优化比较困难的时候，使用Parallel收集器配合自适应调节策略，
把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。
=========
Parallel Old收集器
特性：
Parallel 收集器的老年代版本，使用多线程和”标记-整理“算法。
应用场景：
在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。
这个收集器是在JDK1.6中才开始提供的，特别是在Server模式，多CPU的情况下。
================
CMS收集器
特性：
CMS（Concurrent Mark Sweep）收集器：基于<<”标记-清除“算法>>实现的（不进行压缩，会产生内存碎片），
特点是：并发收集，低停顿。
是HotSpot在JDK1.5推出的第一款真正意义上的并发（Concurrent）收集器；第一次实现了让垃圾收集线程与用户线程（基本上）同时工作；
      应用场景
与用户交互较多的场景。CMS 收集器是一种以获取最短回收停顿时间为目标的收集器。
目前很大一部分的Java应用集中在互联网或者B/S系统的服务端上，
这类应用尤其注重服务的响应速度，希望系统停顿时间最短，以给用户带来极好的体验。CMS收集器就非常符合这类应用的需求。
      运作过程：
对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：
初始标记（CMS initial mark）
初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，但需要“Stop The World”。
并发标记（CMS concurrent mark）
并发标记阶段就是进行GC Roots Tracing的过程，刚才产生的集合中标记出存活对象；
应用程序也在运行；并不能保证可以标记出所有的存活对象；
重新标记（CMS remark）
重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录；
仍然需要需要”Stop The World“，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。
并发清除（CMS concurrent sweep）
并发清除阶段会清除对象，回收所有的垃圾对象。
由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，
CMS收集器的内存回收过程是与用户线程一起并发执行的。
   缺点：
CMS收集器对CPU资源非常敏感
其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，
但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。
CMS默认启动的回收线程数=（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，
并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得更大，可能会无法接受。
了解：
增量式并发收集器：针对上述这种情况，曾出现了”增量式并发收集器“，类似使用抢占式来模拟多任务机制的思想，
让收集线程和用户线程交替运行，减少收集线程运行时间；但效果并不理想，JDK1.6后官方就不再提倡用户使用。
CMS收集器无法处理浮动垃圾 
CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。
(1):浮动垃圾：
由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，
CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。
由于在垃圾收集阶段用户线程还需要运行，那就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，
也可以热为CMS所需要的空间比其他垃圾收集器大；
      "-XX:CMSInitiatingOccupancyFraction"：设置CMS预留内存空间；
      JDK1.5默认值为68%；
      JDK1.6变为大约92%；
(2):"Concurrent Mode Failure"失败：
如果CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：
临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样会导致另一次Full GC的产生。这样停顿时间就更长了，代价会更大，
所以 "-XX:CMSInitiatingOccupancyFraction"不能设置得太大。
CMS收集器会产生大量空间碎片
CMS是一款基于“标记―清除”算法实现的收集器，清除后不进行压缩操作，这意味着收集结束时会有大量空间碎片产生。
空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。
解决办法：
  （1）、"-XX:+UseCMSCompactAtFullCollection"
使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程； 但合并整理过程无法并发，停顿时间会变长； 默认开启（但不会进行，结合下面的CMSFullGCsBeforeCompaction）；    （2）、"-XX:+CMSFullGCsBeforeCompaction"
设置执行多少次不压缩的Full GC后，来一次压缩整理； 为减少合并整理过程的停顿时间； 默认为0，也就是说每次都执行Full GC，不会进行压缩整理；
==============
1.G1垃圾收集器
G1（Garbage-First）是一款面向服务端应用的垃圾收集器，JDK 7 Update4 后开始进入商用。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。
在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，
它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。
G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。
G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，
优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，
保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。
与其他GC收集器相比，G1具备如下特点。
特性：
并行与并发
G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，
G1收集器仍然可以通过并发的方式让Java程序继续执行。
分代收集（收集范围包括新生代和老年代）
与其他收集器一样，分代概念在G1中依然得以保留。G1可以不需要其他收集器配合就能独立管理整个GC堆，它能够采用不同的方式去处理不同时期的对象。
使用G1收集器时，Java堆的内存布局有了很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，
但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。
空间整合（结合多种垃圾收集算法，不产生碎片）
与CMS的“标记―清理”算法不同，G1从整体来看是基于“标记―整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，但无论如何，
这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，
分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。
可预测的停顿（低停顿的同时实现高吞吐量）
这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，
能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。
应用场景：
1.面向服务端应用，针对具有大内存、多处理器的机器；最主要的应用是为需要低GC延迟，并具有大堆的应用程序提供解决方案；
如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；
2.用来替换掉JDK1.5的CMS收集器；
（1）、超过50%的Java堆被活动数据占用；
（2）、对象分配频率或年代提升频率变化很大；
（3）、GC停顿时间过长（长与0.5至1秒）。
是否一定采用G1呢？也未必：
如果现在采用的收集器没有出现问题，不用着急去选择G1;
如果应用程序追求低停顿，可以尝试选择G1;
是否替代CMS需要实际场景测试才知道。
3.执行过程：
G1收集器的运作大致可划分为以下几个步骤：
初始标记（Initial Marking）
初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，
能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。
并发标记（Concurrent Marking）
并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。
最终标记（Final Marking）
最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，
最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。
筛选回收（Live Data Counting and Evacuation）
筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，
但是因为只回收一部分价值高的Region区的垃圾对象，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。回收时，采用“复制”算法，
从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存。

3.内存分配
元空间(metaspace)
元空间的特点：
充分利用了Java语言规范中的好处：类及相关的元数据的生命周期与类加载器的一致。
每个加载器有专门的存储空间
只进行线性分配
不会单独回收某个类
省掉了GC扫描及压缩的时间
元空间里的对象的位置是固定的
如果GC发现某个类加载器不再存活了，会把相关的空间整个回收掉

元空间的内存分配模型
绝大多数的类元数据的空间都从本地内存中分配

用来描述类元数据的类也被删除了

分元数据分配了多个虚拟内存空间

给每个类加载器分配一个内存块的列表。块的大小取决于类加载器的类型; sun/反射/代理对应的类加载器的块会小一些

归还内存块，释放内存块列表

一旦元空间的数据被清空了，虚拟内存的空间会被回收掉

减少碎片的策略
=================================================================================================================
4.类加载
加载：
在加载阶段（可以参考java.lang.ClassLoader的loadClass()方法），虚拟机需要完成以下3件事情：
通过一个类的全限定名来获取定义此类的二进制字节流（并没有指明要从一个Class文件中获取，可以从其他渠道，譬如：网络、动态生成、数据库等）；
将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；
在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；
加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，
但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。
验证:
保证class保证字节流的信息是否符合虚拟机要求,并且不会危害虚拟机
验证阶段大致会完成4个阶段的检验动作：
文件格式验证：验证字节流是否符合Class文件格式的规范
元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求
字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。
符号引用验证：确保解析动作能正确执行。
验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。
准备:
是正式为变量分配并设置类变量的初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.这时候进行内存分配的仅包括类变量
（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“
通常情况”下是数据类型的零值，假设一个类变量的定义为：
那变量value在准备阶段过后的初始值为0而不是123.因为这时候尚未开始执行任何java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。
至于“特殊情况”是指：public static final int value=123，即当类字段的字段属性是ConstantValue时，会在准备阶段初始化为指定的值，所以标注为final之后，value的值在准备阶段初始化为123而非0.










